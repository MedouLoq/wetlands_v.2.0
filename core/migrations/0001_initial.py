# Generated by Django 5.2.2 on 2025-06-10 09:31

import django.contrib.gis.db.models.fields
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='DataSource',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('source_type', models.CharField(blank=True, max_length=100, null=True)),
                ('organization', models.CharField(blank=True, max_length=255, null=True)),
                ('contact_person', models.CharField(blank=True, max_length=255, null=True)),
                ('citation', models.TextField(blank=True, null=True)),
                ('url', models.URLField(blank=True, max_length=2000, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Data Source',
                'verbose_name_plural': 'Data Sources',
                'db_table': 'data_sources',
            },
        ),
        migrations.CreateModel(
            name='MeasureType',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Measure Type',
                'verbose_name_plural': 'Measure Types',
                'db_table': 'measure_types',
            },
        ),
        migrations.CreateModel(
            name='ObservationMethod',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Observation Method',
                'verbose_name_plural': 'Observation Methods',
                'db_table': 'observation_methods',
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Role',
                'verbose_name_plural': 'Roles',
                'db_table': 'roles',
            },
        ),
        migrations.CreateModel(
            name='Species',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('scientific_name', models.CharField(blank=True, max_length=255, null=True, unique=True)),
                ('common_name_fr', models.CharField(blank=True, max_length=255, null=True)),
                ('common_name_local', models.CharField(blank=True, max_length=255, null=True)),
                ('iucn_status', models.CharField(blank=True, max_length=50, null=True)),
                ('national_status', models.CharField(blank=True, max_length=50, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Species',
                'verbose_name_plural': 'Species',
                'db_table': 'species',
                'ordering': ['scientific_name', 'common_name_fr'],
            },
        ),
        migrations.CreateModel(
            name='TaxonomicGroup',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Taxonomic Group',
                'verbose_name_plural': 'Taxonomic Groups',
                'db_table': 'taxonomic_groups',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Threat',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Threat',
                'verbose_name_plural': 'Threats',
                'db_table': 'threats',
                'ordering': ['threat_type', 'name'],
            },
        ),
        migrations.CreateModel(
            name='ThreatType',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Threat Type',
                'verbose_name_plural': 'Threat Types',
                'db_table': 'threat_types',
            },
        ),
        migrations.CreateModel(
            name='WetlandType',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('code', models.CharField(blank=True, max_length=10, null=True, unique=True)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Wetland Type',
                'verbose_name_plural': 'Wetland Types',
                'db_table': 'wetland_types',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ConservationMeasure',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('measure_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.measuretype')),
            ],
            options={
                'verbose_name': 'Conservation Measure',
                'verbose_name_plural': 'Conservation Measures',
                'db_table': 'conservation_measures',
                'ordering': ['measure_type', 'name'],
            },
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('username', models.CharField(max_length=150, unique=True)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('first_name', models.CharField(blank=True, max_length=150, null=True)),
                ('last_name', models.CharField(blank=True, max_length=150, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('last_login', models.DateTimeField(blank=True, null=True)),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('role', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='core.role')),
            ],
            options={
                'verbose_name': 'Custom User',
                'verbose_name_plural': 'Custom Users',
                'db_table': 'custom_users',
            },
        ),
        migrations.CreateModel(
            name='SiteConservationMeasure',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(blank=True, max_length=50, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('data_source', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.datasource')),
                ('measure', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.conservationmeasure')),
            ],
            options={
                'verbose_name': 'Site Conservation Measure',
                'verbose_name_plural': 'Site Conservation Measures',
                'db_table': 'site_conservation_measures',
            },
        ),
        migrations.CreateModel(
            name='SiteSpeciesInventory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notes', models.TextField(blank=True, null=True)),
                ('data_source', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.datasource')),
                ('species', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.species')),
            ],
            options={
                'verbose_name': 'Site Species Inventory',
                'verbose_name_plural': 'Site Species Inventories',
                'db_table': 'site_species_inventory',
            },
        ),
        migrations.AddField(
            model_name='species',
            name='taxonomic_group',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.taxonomicgroup'),
        ),
        migrations.CreateModel(
            name='SiteThreat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('intensity', models.CharField(blank=True, max_length=50, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('data_source', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.datasource')),
                ('threat', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.threat')),
            ],
            options={
                'verbose_name': 'Site Threat',
                'verbose_name_plural': 'Site Threats',
                'db_table': 'site_threats',
            },
        ),
        migrations.AddField(
            model_name='threat',
            name='threat_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.threattype'),
        ),
        migrations.CreateModel(
            name='WetlandSite',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('code', models.CharField(blank=True, max_length=50, null=True, unique=True)),
                ('region', models.CharField(blank=True, max_length=100, null=True, verbose_name='Wilaya')),
                ('commune', models.CharField(blank=True, max_length=100, null=True)),
                ('area_hectares', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('designation_date', models.DateField(blank=True, null=True)),
                ('ramsar_criteria_met', models.TextField(blank=True, null=True)),
                ('description_ecological', models.TextField(blank=True, null=True)),
                ('description_physical', models.TextField(blank=True, null=True)),
                ('hydrology_summary', models.TextField(blank=True, null=True)),
                ('climate_summary', models.TextField(blank=True, null=True)),
                ('land_use_current', models.TextField(blank=True, null=True)),
                ('land_use_adjacent', models.TextField(blank=True, null=True)),
                ('social_cultural_values', models.TextField(blank=True, null=True)),
                ('conservation_measures_taken', models.TextField(blank=True, null=True)),
                ('conservation_measures_proposed', models.TextField(blank=True, null=True)),
                ('threats_anthropogenic', models.TextField(blank=True, null=True)),
                ('threats_natural', models.TextField(blank=True, null=True)),
                ('contacts', models.TextField(blank=True, null=True)),
                ('geometry', django.contrib.gis.db.models.fields.PointField(blank=True, null=True, srid=4326)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('conservation_measures', models.ManyToManyField(related_name='wetland_sites', through='core.SiteConservationMeasure', to='core.conservationmeasure')),
                ('data_source', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.datasource')),
                ('species_inventory', models.ManyToManyField(related_name='wetland_sites', through='core.SiteSpeciesInventory', to='core.species')),
                ('threats', models.ManyToManyField(related_name='wetland_sites', through='core.SiteThreat', to='core.threat')),
            ],
            options={
                'verbose_name': 'Wetland Site',
                'verbose_name_plural': 'Wetland Sites',
                'db_table': 'wetland_sites',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='SiteWetlandType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('percentage_cover', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('site', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.wetlandsite')),
                ('wetland_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.wetlandtype')),
            ],
            options={
                'verbose_name': 'Site Wetland Type',
                'verbose_name_plural': 'Site Wetland Types',
                'db_table': 'site_wetland_types',
            },
        ),
        migrations.AddField(
            model_name='sitethreat',
            name='site',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.wetlandsite'),
        ),
        migrations.AddField(
            model_name='sitespeciesinventory',
            name='site',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.wetlandsite'),
        ),
        migrations.AddField(
            model_name='siteconservationmeasure',
            name='site',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.wetlandsite'),
        ),
        migrations.CreateModel(
            name='Observation',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('observation_date', models.DateField()),
                ('observation_time', models.TimeField(blank=True, null=True)),
                ('observer_name', models.CharField(blank=True, max_length=255, null=True)),
                ('count', models.IntegerField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('location', django.contrib.gis.db.models.fields.PointField(blank=True, null=True, srid=4326)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('data_source', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.datasource')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.customuser')),
                ('observation_method', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.observationmethod')),
                ('species', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.species')),
                ('wetland_site', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.wetlandsite')),
            ],
            options={
                'verbose_name': 'Observation',
                'verbose_name_plural': 'Observations',
                'db_table': 'observations',
                'ordering': ['-observation_date', '-observation_time'],
            },
        ),
        migrations.AddField(
            model_name='wetlandsite',
            name='wetland_types',
            field=models.ManyToManyField(related_name='wetland_sites', through='core.SiteWetlandType', to='core.wetlandtype'),
        ),
        migrations.AddConstraint(
            model_name='species',
            constraint=models.CheckConstraint(condition=models.Q(('scientific_name__isnull', False), ('common_name_fr__isnull', False), ('common_name_local__isnull', False), _connector='OR'), name='chk_species_name'),
        ),
        migrations.AlterUniqueTogether(
            name='sitethreat',
            unique_together={('site', 'threat')},
        ),
        migrations.AlterUniqueTogether(
            name='sitespeciesinventory',
            unique_together={('site', 'species')},
        ),
        migrations.AlterUniqueTogether(
            name='siteconservationmeasure',
            unique_together={('site', 'measure')},
        ),
        migrations.AlterUniqueTogether(
            name='sitewetlandtype',
            unique_together={('site', 'wetland_type')},
        ),
    ]
